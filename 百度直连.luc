local http = require 'http'
local backend = require 'backend'

local find, sub, format = string.find, string.sub, string.format
local concat = table.concat

local ADDRESS = backend.ADDRESS
local PROXY = backend.PROXY
local DIRECT_WRITE = backend.SUPPORT.DIRECT_WRITE

local SUCCESS = backend.RESULT.SUCCESS
local HANDSHAKE = backend.RESULT.HANDSHAKE
local DIRECT = backend.RESULT.DIRECT

local ctx_uuid = backend.get_uuid
local ctx_address_host = backend.get_address_host
local ctx_address_port = backend.get_address_port
local ctx_write = backend.write
local ctx_free = backend.free
local ctx_debug = backend.debug

local is_http_request = http.is_http_request

local flags = {}
local kHttpHeaderSent = 1
local kHttpHeaderReceived = 2

-- 预定义常用字符串
local CRLF = '\r\n'
local CRLFCRLF = '\r\n\r\n'
local UA_HEADER = 'User-Agent: baiduboxapp\r\n'
local CONNECT_TEMPLATE = 'CONNECT %s:%d HTTP/1.1\r\nHost: %s:%d\r\nProxy-Connection: Keep-Alive\r\nX-T5-Auth: 1109293052\r\n\r\n'

-- 构建CONNECT请求（修复Host头错误）
local function build_connect_request(host, port)
    return format(CONNECT_TEMPLATE, host, port, host, port)
end

-- 优化后的HTTP头解析
local function parse_http_request(buf)
    local method, path, headers = buf:match('^(%u+)%s+(.-)%s+HTTP/%d%.%d\r\n(.+)\r\n\r\n')
    if not method then return nil, "Malformed HTTP request" end
    
    return method, path, headers
end

function wa_lua_on_flags_cb(ctx)
    return 0
end

function wa_lua_on_handshake_cb(ctx)
    local uuid = ctx_uuid(ctx)
    if flags[uuid] == kHttpHeaderReceived then
        return true
    end

    if not flags[uuid] then
        local host = ctx_address_host(ctx)
        local port = ctx_address_port(ctx)
        ctx_write(ctx, build_connect_request(host, port))
        flags[uuid] = kHttpHeaderSent
    end

    return false
end

function wa_lua_on_read_cb(ctx, buf)
    local uuid = ctx_uuid(ctx)
    if flags[uuid] == kHttpHeaderSent then
        flags[uuid] = kHttpHeaderReceived
        return HANDSHAKE, nil
    end
    return DIRECT, buf
end

function wa_lua_on_write_cb(ctx, buf)
    if is_http_request(buf) == 1 then
        local method, path, headers = parse_http_request(buf)
        if method then
            -- 使用gsub进行高效替换
            local new_headers, count = headers:gsub('User%-Agent:[^\r\n]*\r\n', UA_HEADER)
            if count == 0 then
                new_headers = UA_HEADER .. new_headers
            end
            
            buf = concat({
                method, ' ', path, ' HTTP/1.1', CRLF,
                new_headers, CRLF
            })
        end
    end
    return DIRECT, buf
end

function wa_lua_on_close_cb(ctx)
    local uuid = ctx_uuid(ctx)
    flags[uuid] = nil
    ctx_free(ctx)
    return SUCCESS
end